// Code generated by dagger-compiler.  Do not edit.
package com.hannesdorfmann.mosbyviewpagerdemo.post;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<PostFragment>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code PostFragment} and its
 * dependencies.
 *
 * Being a {@code Provider<PostFragment>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<PostFragment>} and handling injection
 * of annotated fields.
 */
public final class PostFragment$$InjectAdapter extends Binding<PostFragment>
    implements Provider<PostFragment>, MembersInjector<PostFragment> {
  private Binding<com.squareup.picasso.Picasso> picasso;
  private Binding<com.hannesdorfmann.mosby.dagger1.Dagger1MosbyFragment> supertype;

  public PostFragment$$InjectAdapter() {
    super("com.hannesdorfmann.mosbyviewpagerdemo.post.PostFragment", "members/com.hannesdorfmann.mosbyviewpagerdemo.post.PostFragment", NOT_SINGLETON, PostFragment.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    picasso = (Binding<com.squareup.picasso.Picasso>) linker.requestBinding("com.squareup.picasso.Picasso", PostFragment.class, getClass().getClassLoader());
    supertype = (Binding<com.hannesdorfmann.mosby.dagger1.Dagger1MosbyFragment>) linker.requestBinding("members/com.hannesdorfmann.mosby.dagger1.Dagger1MosbyFragment", PostFragment.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(picasso);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<PostFragment>}.
   */
  @Override
  public PostFragment get() {
    PostFragment result = new PostFragment();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<PostFragment>}.
   */
  @Override
  public void injectMembers(PostFragment object) {
    object.picasso = picasso.get();
    supertype.injectMembers(object);
  }

}
