// Code generated by dagger-compiler.  Do not edit.
package com.hannesdorfmann.mosbyviewpagerdemo;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<PostsPresenter>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code PostsPresenter} and its
 * dependencies.
 *
 * Being a {@code Provider<PostsPresenter>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<PostsPresenter>} and handling injection
 * of annotated fields.
 */
public final class PostsPresenter$$InjectAdapter extends Binding<PostsPresenter>
    implements Provider<PostsPresenter>, MembersInjector<PostsPresenter> {
  private Binding<com.hannesdorfmann.mosbyviewpagerdemo.model.GivesMeHopeApi> api;
  private Binding<com.hannesdorfmann.mosby.retrofit.LceRetrofitPresenter> supertype;

  public PostsPresenter$$InjectAdapter() {
    super("com.hannesdorfmann.mosbyviewpagerdemo.PostsPresenter", "members/com.hannesdorfmann.mosbyviewpagerdemo.PostsPresenter", NOT_SINGLETON, PostsPresenter.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    api = (Binding<com.hannesdorfmann.mosbyviewpagerdemo.model.GivesMeHopeApi>) linker.requestBinding("com.hannesdorfmann.mosbyviewpagerdemo.model.GivesMeHopeApi", PostsPresenter.class, getClass().getClassLoader());
    supertype = (Binding<com.hannesdorfmann.mosby.retrofit.LceRetrofitPresenter>) linker.requestBinding("members/com.hannesdorfmann.mosby.retrofit.LceRetrofitPresenter", PostsPresenter.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(api);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<PostsPresenter>}.
   */
  @Override
  public PostsPresenter get() {
    PostsPresenter result = new PostsPresenter(api.get());
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<PostsPresenter>}.
   */
  @Override
  public void injectMembers(PostsPresenter object) {
    supertype.injectMembers(object);
  }

}
